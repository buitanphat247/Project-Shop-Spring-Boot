package com.example.spring_boot.services.products; // Package service qu·∫£n l√Ω s·∫£n ph·∫©m

import com.example.spring_boot.domains.products.Product; // Entity s·∫£n ph·∫©m
import com.example.spring_boot.domains.products.Category; // Entity danh m·ª•c
import com.example.spring_boot.repository.products.ProductRepository; // Repository Mongo cho s·∫£n ph·∫©m
import com.example.spring_boot.repository.products.CategoryRepository; // Repository danh m·ª•c

import lombok.RequiredArgsConstructor; // Inject constructor cho field final
import lombok.extern.slf4j.Slf4j; // H·ªó tr·ª£ logging
import org.springframework.data.domain.Page; // K·∫øt qu·∫£ ph√¢n trang
import org.springframework.data.domain.PageImpl; // Tri·ªÉn khai Page t·ª´ danh s√°ch
import org.springframework.data.domain.Pageable; // ƒê·∫ßu v√†o ph√¢n trang
import org.springframework.data.mongodb.core.MongoTemplate; // MongoDB template cho query t·ªëi ∆∞u
import org.springframework.data.mongodb.core.query.Criteria; // Criteria cho query
import org.springframework.data.mongodb.core.query.Query; // Query builder
import org.springframework.stereotype.Service; // Bean service Spring
import org.springframework.transaction.annotation.Transactional; // Transaction wrapper

import java.time.Instant; // Th·ªùi ƒëi·ªÉm UTC
import java.util.List; // Danh s√°ch k·∫øt qu·∫£
import java.util.Map; // Map cho batch operations
import java.util.stream.Collectors; // Stream operations

@Service // ƒêƒÉng k√Ω bean service
@RequiredArgsConstructor // T·∫°o constructor cho field final
@Slf4j // B·∫≠t logging
@Transactional // Transaction cho class
public class ProductService {

    private final ProductRepository productRepository; // DAO s·∫£n ph·∫©m
    private final CategoryRepository categoryRepository; // DAO danh m·ª•c
    private final MongoTemplate mongoTemplate; // MongoDB template cho query t·ªëi ∆∞u

    /** T·∫°o product m·ªõi: reset id, set createdAt, l∆∞u DB. */
    public Product create(Product product) {
        try {
            // Validate categoryId n·∫øu c√≥ (cho ph√©p b·ªè tr·ªëng)
            if (product.getCategoryId() != null) {
                if (!categoryRepository.existsById(product.getCategoryId().toHexString())) {
                    throw new RuntimeException("Category not found");
                }
            }

            product.setId(null); // Reset id ƒë·ªÉ lu√¥n t·∫°o m·ªõi
            product.setCreatedAt(Instant.now()); // G√°n th·ªùi ƒëi·ªÉm t·∫°o
            Product savedProduct = productRepository.save(product); // L∆∞u v√† nh·∫≠n entity ƒë√£ l∆∞u

            // Populate category n·∫øu DocumentReference kh√¥ng t·ª± ƒë·ªông load
            // if (savedProduct.getCategory() == null && savedProduct.getCategoryId() !=
            // null) {
            // categoryRepository.findById(savedProduct.getCategoryId().toHexString())
            // .ifPresent(savedProduct::setCategory);
            // }

            return savedProduct; // Tr·∫£ v·ªÅ entity ƒë√£ l∆∞u
        } catch (Exception e) {
            log.error("Create product failed, name={}", product != null ? product.getName() : null, e); // Log ng·ªØ c·∫£nh
            throw new RuntimeException("Failed to create product: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    /** C·∫≠p nh·∫≠t product (ch·∫∑n n·∫øu ƒë√£ b·ªã x√≥a m·ªÅm). */
    public Product update(String id, Product updated) {
        try {
            Product existing = productRepository.findById(id) // T√¨m theo id
                    .orElseThrow(() -> new RuntimeException("Product not found with ID: " + id)); // Kh√¥ng th·∫•y -> 404
            if (existing.getDeletedAt() != null)
                throw new RuntimeException("Product has been deleted"); // ƒê√£ x√≥a m·ªÅm -> ch·∫∑n c·∫≠p nh·∫≠t

            // Validate categoryId n·∫øu c√≥ thay ƒë·ªïi
            if (updated.getCategoryId() != null && !updated.getCategoryId().equals(existing.getCategoryId())) {
                if (!categoryRepository.existsById(updated.getCategoryId().toHexString())) {
                    throw new RuntimeException("Category not found");
                }
                existing.setCategoryId(updated.getCategoryId()); // C·∫≠p nh·∫≠t danh m·ª•c
            }

            existing.setName(updated.getName()); // C·∫≠p nh·∫≠t t√™n
            existing.setDescription(updated.getDescription()); // C·∫≠p nh·∫≠t m√¥ t·∫£
            existing.setPrice(updated.getPrice()); // C·∫≠p nh·∫≠t gi√°
            existing.setStock(updated.getStock()); // C·∫≠p nh·∫≠t t·ªìn
            existing.setUpdatedAt(Instant.now()); // G√°n th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t

            Product savedProduct = productRepository.save(existing); // L∆∞u thay ƒë·ªïi

            // Populate category n·∫øu DocumentReference kh√¥ng t·ª± ƒë·ªông load
            if (savedProduct.getCategory() == null && savedProduct.getCategoryId() != null) {
                categoryRepository.findById(savedProduct.getCategoryId().toHexString())
                        .ifPresent(savedProduct::setCategory);
            }

            return savedProduct; // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        } catch (Exception e) {
            log.error("Update product failed, id={}", id, e); // Log ng·ªØ c·∫£nh
            throw new RuntimeException("Failed to update product: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    /** X√≥a m·ªÅm product. */
    public void softDelete(String id) {
        try {
            Product existing = productRepository.findById(id) // T√¨m theo id
                    .orElseThrow(() -> new RuntimeException("Product not found with ID: " + id)); // Kh√¥ng th·∫•y -> l·ªói
            if (existing.getDeletedAt() != null)
                throw new RuntimeException("Product has been deleted"); // ƒê√£ x√≥a m·ªÅm -> ch·∫∑n thao t√°c l·∫∑p
            existing.setDeletedAt(Instant.now()); // ƒê√°nh d·∫•u x√≥a m·ªÅm
            productRepository.save(existing); // L∆∞u thay ƒë·ªïi
        } catch (Exception e) {
            log.error("Soft delete product failed, id={}", id, e); // Log ng·ªØ c·∫£nh l·ªói
            throw new RuntimeException("Failed to soft delete product: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** L·∫•y product theo id (ch·ªâ tr·∫£ v·ªÅ n·∫øu ch∆∞a b·ªã x√≥a m·ªÅm). */
    public Product getById(String id) {
        try {
            Product p = productRepository.findById(id) // T√¨m theo id
                    .orElseThrow(() -> new RuntimeException("Product not found with ID: " + id)); // Kh√¥ng th·∫•y -> 404
            if (p.getDeletedAt() != null)
                throw new RuntimeException("Product has been deleted"); // ƒê√£ x√≥a m·ªÅm -> kh√¥ng tr·∫£ v·ªÅ

            // Populate category n·∫øu DocumentReference kh√¥ng t·ª± ƒë·ªông load
            if (p.getCategory() == null && p.getCategoryId() != null) {
                categoryRepository.findById(p.getCategoryId().toHexString())
                        .ifPresent(p::setCategory);
            }

            return p; // Tr·∫£ v·ªÅ entity
        } catch (Exception e) {
            log.error("Get product by id failed, id={}", id, e); // Log l·ªói
            throw new RuntimeException("Failed to get product: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** L·∫•y to√†n b·ªô s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông - T·ªêI ∆ØU H√ìA v·ªõi batch loading. */
    public List<Product> getAllActive() {
        long startTime = System.currentTimeMillis();
        log.info("üöÄ [PERFORMANCE] Getting all active products with batch optimization");

        try {
            // S·ª≠ d·ª•ng MongoTemplate v·ªõi projection ƒë·ªÉ ch·ªâ l·∫•y fields c·∫ßn thi·∫øt
            Query query = new Query(Criteria.where("deletedAt").isNull());
            query.fields().include("name", "description", "price", "stock", "categoryId", "createdAt", "updatedAt");

            List<Product> products = mongoTemplate.find(query, Product.class);
            log.info("üìä [PERFORMANCE] Found {} products in {}ms", products.size(),
                    System.currentTimeMillis() - startTime);

            // BATCH LOADING: Load t·∫•t c·∫£ categories trong 1 query thay v√¨ N+1 queries
            batchPopulateCategories(products);

            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Completed in {}ms", endTime - startTime);
            return products; // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ populate
        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Get all active products failed", e); // Log l·ªói
            throw new RuntimeException("Failed to list products: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** T√¨m ki·∫øm theo t√™n (ignore-case) - T·ªêI ∆ØU H√ìA v·ªõi compound query. */
    public List<Product> searchByName(String name) {
        long startTime = System.currentTimeMillis();
        log.info("üîç [PERFORMANCE] Searching products by name: {}", name);

        try {
            // S·ª≠ d·ª•ng MongoTemplate v·ªõi compound query t·ªëi ∆∞u
            Query query = new Query();

            if (name == null || name.trim().isEmpty()) {
                // N·∫øu search term r·ªóng, l·∫•y t·∫•t c·∫£ active products
                query.addCriteria(Criteria.where("deletedAt").isNull());
            } else {
                // Compound query: name search + soft delete filter
                query.addCriteria(Criteria.where("deletedAt").isNull())
                        .addCriteria(Criteria.where("name").regex(name, "i")); // Case-insensitive regex
            }

            // Projection ƒë·ªÉ ch·ªâ l·∫•y fields c·∫ßn thi·∫øt
            query.fields().include("name", "description", "price", "stock", "categoryId", "createdAt");

            List<Product> products = mongoTemplate.find(query, Product.class);
            log.info("üìä [PERFORMANCE] Found {} products matching '{}' in {}ms",
                    products.size(), name, System.currentTimeMillis() - startTime);

            // BATCH LOADING: Load t·∫•t c·∫£ categories trong 1 query
            batchPopulateCategories(products);

            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Search completed in {}ms", endTime - startTime);
            return products; // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ populate
        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Search products failed, name={}", name, e); // Log l·ªói
            throw new RuntimeException("Failed to search products: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** L·∫•y s·∫£n ph·∫©m theo categoryId - T·ªêI ∆ØU H√ìA v·ªõi compound index. */
    public List<Product> getByCategoryId(String categoryId) {
        long startTime = System.currentTimeMillis();
        log.info("üìÇ [PERFORMANCE] Getting products by category: {}", categoryId);

        try {
            // S·ª≠ d·ª•ng compound query t·ªëi ∆∞u cho category + soft delete
            Query query = new Query(Criteria.where("categoryId").is(categoryId)
                    .and("deletedAt").isNull());

            // Projection ƒë·ªÉ ch·ªâ l·∫•y fields c·∫ßn thi·∫øt
            query.fields().include("name", "description", "price", "stock", "categoryId", "createdAt");

            List<Product> products = mongoTemplate.find(query, Product.class);
            log.info("üìä [PERFORMANCE] Found {} products in category {} in {}ms",
                    products.size(), categoryId, System.currentTimeMillis() - startTime);

            // BATCH LOADING: Load t·∫•t c·∫£ categories trong 1 query
            batchPopulateCategories(products);

            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Category query completed in {}ms", endTime - startTime);
            return products; // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ populate
        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Get products by categoryId failed, categoryId={}", categoryId, e); // Log l·ªói
            throw new RuntimeException("Failed to get products by category: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** Ph√¢n trang s·∫£n ph·∫©m active - T·ªêI ∆ØU H√ìA v·ªõi skip/limit. */
    public Page<Product> getPaged(Pageable pageable) {
        long startTime = System.currentTimeMillis();
        log.info("üìÑ [PERFORMANCE] Getting paged products: page={}, size={}",
                pageable.getPageNumber(), pageable.getPageSize());

        try {
            // S·ª≠ d·ª•ng skip/limit thay v√¨ load t·∫•t c·∫£ r·ªìi slice
            Query query = new Query(Criteria.where("deletedAt").isNull());

            // Projection ƒë·ªÉ ch·ªâ l·∫•y fields c·∫ßn thi·∫øt
            query.fields().include("name", "description", "price", "stock", "categoryId", "createdAt", "updatedAt");

            // Apply pagination
            query.skip(pageable.getOffset());
            query.limit(pageable.getPageSize());

            // Apply sorting
            if (pageable.getSort().isSorted()) {
                pageable.getSort().forEach(order -> {
                    query.with(org.springframework.data.domain.Sort.by(
                            order.getDirection(), order.getProperty()));
                });
            } else {
                // Default sort by creation time descending
                query.with(org.springframework.data.domain.Sort.by("createdAt").descending());
            }

            List<Product> products = mongoTemplate.find(query, Product.class);
            log.info("üìä [PERFORMANCE] Retrieved {} products for page {} in {}ms",
                    products.size(), pageable.getPageNumber(), System.currentTimeMillis() - startTime);

            // Count total records (separate query for efficiency)
            long totalCount = getTotalActiveCount();

            // BATCH LOADING: Load t·∫•t c·∫£ categories trong 1 query
            batchPopulateCategories(products);

            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Pagination completed in {}ms", endTime - startTime);

            return new PageImpl<>(products, pageable, totalCount); // Tr·∫£ v·ªÅ Page
        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Get paged products failed, page={}, size={}",
                    pageable.getPageNumber(), pageable.getPageSize(), e); // Log l·ªói
            throw new RuntimeException("Failed to paginate products: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    // =====================================================
    // HELPER METHODS - C√°c ph∆∞∆°ng th·ª©c h·ªó tr·ª£ t·ªëi ∆∞u h√≥a
    // =====================================================

    /**
     * Batch populate categories ƒë·ªÉ tr√°nh N+1 problem
     * T·ªëi ∆∞u: Single query ƒë·ªÉ load t·∫•t c·∫£ categories c·∫ßn thi·∫øt
     */
    private void batchPopulateCategories(List<Product> products) {
        if (products.isEmpty())
            return;

        long startTime = System.currentTimeMillis();

        // Collect unique category IDs
        List<String> categoryIds = products.stream()
                .map(Product::getCategoryId)
                .filter(id -> id != null)
                .map(Object::toString)
                .distinct()
                .collect(Collectors.toList());

        if (categoryIds.isEmpty())
            return;

        // Batch load all categories in single query
        Query categoryQuery = new Query(Criteria.where("_id").in(categoryIds));
        List<Category> categories = mongoTemplate.find(categoryQuery, Category.class);

        // Create lookup map
        Map<String, Category> categoryMap = categories.stream()
                .collect(Collectors.toMap(Category::getId, cat -> cat));

        // Populate categories
        products.forEach(product -> {
            if (product.getCategoryId() != null) {
                String categoryIdStr = product.getCategoryId().toString();
                Category category = categoryMap.get(categoryIdStr);
                if (category != null) {
                    product.setCategory(category);
                }
            }
        });

        long endTime = System.currentTimeMillis();
        log.debug("üîÑ [PERFORMANCE] Batch populated {} categories in {}ms",
                categories.size(), endTime - startTime);
    }

    /**
     * Get total count of active products
     * T·ªëi ∆∞u: S·ª≠ d·ª•ng count query v·ªõi index
     */
    private long getTotalActiveCount() {
        Query countQuery = new Query(Criteria.where("deletedAt").isNull());
        return mongoTemplate.count(countQuery, Product.class);
    }

    /**
     * T·∫°o th·ªëng k√™ s·∫£n ph·∫©m v·ªõi aggregation
     * T·ªëi ∆∞u: Single aggregation query cho multiple statistics
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getProductStatistics() {
        log.info("üìà [PERFORMANCE] Getting product statistics");
        long startTime = System.currentTimeMillis();

        try {
            // S·ª≠ d·ª•ng aggregation ƒë·ªÉ t√≠nh to√°n statistics trong 1 query
            org.springframework.data.mongodb.core.aggregation.Aggregation aggregation = org.springframework.data.mongodb.core.aggregation.Aggregation
                    .newAggregation(
                            // Match active products only
                            org.springframework.data.mongodb.core.aggregation.Aggregation.match(
                                    Criteria.where("deletedAt").isNull()),

                            // Group and calculate statistics
                            org.springframework.data.mongodb.core.aggregation.Aggregation.group()
                                    .count().as("totalProducts")
                                    .avg("price").as("averagePrice")
                                    .sum("stock").as("totalStock")
                                    .min("price").as("minPrice")
                                    .max("price").as("maxPrice"),

                            // Project results
                            org.springframework.data.mongodb.core.aggregation.Aggregation.project()
                                    .and("totalProducts").as("totalProducts")
                                    .and("averagePrice").as("averagePrice")
                                    .and("totalStock").as("totalStock")
                                    .and("minPrice").as("minPrice")
                                    .and("maxPrice").as("maxPrice"));

            @SuppressWarnings("rawtypes")
            org.springframework.data.mongodb.core.aggregation.AggregationResults<Map> results = mongoTemplate
                    .aggregate(aggregation, "products", Map.class);

            @SuppressWarnings("unchecked")
            Map<String, Object> stats = (Map<String, Object>) results.getUniqueMappedResult();
            if (stats == null) {
                stats = Map.of(
                        "totalProducts", 0L,
                        "averagePrice", 0.0,
                        "totalStock", 0L,
                        "minPrice", 0.0,
                        "maxPrice", 0.0);
            }

            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Statistics completed in {}ms: {}", endTime - startTime, stats);
            return stats;

        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Error getting statistics", e);
            throw new RuntimeException("Failed to get statistics: " + e.getMessage(), e);
        }
    }
}
